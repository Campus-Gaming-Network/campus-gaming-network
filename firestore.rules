rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    ///////////////////////////////////////////////////////////////////////////
    // Rules

    match /users/{userId} {
        function canCreateUser() {
          return isValidUser();
        }

        function isValidUser() {
          let requiredFields = [
            'id',
            'firstName',
            'lastName',
            'status',
            'gravatar',
            'school',
          ];
          let optionalFields = [
            'createdAt',
            'updatedAt',
            'major',
            'minor',
            'bio',
            'timezone',
            'hometown',
            'birthdate',
            'website',
            'twitter',
            'twitch',
            'youtube',
            'skype',
            'discord',
            'battlenet',
            'steam',
            'xbox',
            'psn',
            'currentlyPlaying',
            'favoriteGames'
          ];
          let statusOptions = [
            "FRESHMAN",
            "SOPHMORE",
            "JUNIOR",
            "SENIOR",
            "GRAD",
            "ALUMNI",
            "FACULTY",
            "OTHER"
          ];
          let timezoneOptions = [
            "",
            "America/Puerto_Rico",
            "America/New_York",
            "America/Chicago",
            "America/Denver",
            "America/Phoenix",
            "America/Los_Angeles",
            "America/Anchorage",
            "Pacific/Honolulu",
          ];

          return (
            documentFieldsCheckOut(requiredFields, optionalFields) &&
            hasLength('id', 1, 255) &&
            hasLength('firstName', 1, 255) &&
            hasLength('lastName', 1, 255) &&
            hasLength('status', 1, 15) &&
            hasLength('gravatar', 1, 255) &&
            isValidOption("status", statusOptions) &&
            hasValidSchool() &&
            hasLengthOrNull("major", 255) &&
            hasLengthOrNull("minor", 255) &&
            hasLengthOrNull("bio", 2500) &&
            isValidOption("timezone", timezoneOptions) &&
            hasLengthOrNull("hometown", 255) &&
            (val('birthdate') == '' || isTimestampField('birthdate')) &&
            hasLengthOrNull("website", 255) &&
            hasLengthOrNull("twitter", 255) &&
            hasLengthOrNull("twitch", 255) &&
            hasLengthOrNull("youtube", 255) &&
            hasLengthOrNull("skype", 255) &&
            hasLengthOrNull("discord", 255) &&
            hasLengthOrNull("battlenet", 255) &&
            hasLengthOrNull("steam", 255) &&
            hasLengthOrNull("xbox", 255) &&
            hasLengthOrNull("psn", 255) &&
            hasLessThanEqualSize('currentlyPlaying', 5) &&
            hasLessThanEqualSize('favoriteGames', 5)
          );
        }

        function canUpdateUser() {
          return (
            isOwner(userId) &&
            isValidUser()
          );
        }

        function canDeleteUser() {
          return (
            isOwner(userId)
          );
        }

      allow read: if true;
      allow create: if canCreateUser();
      allow update: if canUpdateUser();
      allow delete: if canDeleteUser();
      allow write: if false;
    }

    match /events/{eventId} {
      function canCreateEvent() {
        return (
          isEmailVerified() &&
          isSignedIn()
        );
      }

      function isValidEvent() {
        let requiredFields = [
          'creator',
          'name',
          'game',
          'description',
          'startDateTime',
          'endDateTime',
          'isOnlineEvent',
          'school',
        ];
        let optionalFields = [
          'createdAt',
          'updatedAt',
          'location',
          'placeId',
        ];
        return (
            documentFieldsCheckOut(requiredFields, optionalFields) &&
            hasValidCreator() &&
            hasLength('name', 1, 255) &&
            hasLength('description', 1, 5000) &&
            isTimestampField('startDateTime') &&
            isTimestampField('endDateTime') &&
            incomingData().startDateTime < incomingData().endDateTime &&
            hasLengthOrNull('location', 255) &&
            hasLengthOrNull('placeId', 255) &&
            hasValidSchool()
        );
      }

      function canUpdateEvent() {
        return canCreateEvent();
      }

      function canDeleteEvent() {
        return false;
      }

      allow read: if true;
      allow create: if canCreateEvent();
      allow update: if canUpdateEvent();
      allow delete: if canDeleteEvent();
      allow write: if false;
    }

    match /schools/{schoolId} {
      allow read: if true;
      // TODO: Allow update if school moderator
      allow write, create, update, delete: if false;
    }

    match /event-responses/{eventResponseId} {
      function canReadEventResponse() {
        return true;
      }

      function canCreateEventResponse() {
        return (
          isSignedIn() &&
          isValidEventResponse()
        );
      }

      function isValidEventResponse() {
        let responseOptions = ["YES", "NO"];

        return (
          hasLength("response", 1, 5) &&
          isValidOption("response", responseOptions)
        );
        // return (
        //   incomingData.event is path &&
        //   incomingData.school is path &&
        //   incomingData.user is path &&
        //   hasLength("response", 1, 5) &&
        //   isValidOption("response", ["YES", "NO"])
        // );
      }

      function canUpdateEventResponse() {
        return true;
        // return (
        //   canCreateEventResponse(incomingData) &&
        // );
      }

      allow read: if true;
      allow create: if canCreateEventResponse();
      allow update: if canUpdateEventResponse();
      allow write, delete: if false;
    }

    match /game-queries/{gameQueryId} {
      allow read, write, update, create, delete: if false;
    }

    match /reports/{reportId} {
      allow read, write, create, update, delete: if false;
    }

    match /teams/{teamId} {
      function canCreateTeam() {
        return (
          isEmailVerified() &&
          isSignedIn()
        );
      }

      function canUpdateTeam() {
        return canCreateTeam();
      }

      function canDeleteTeam() {
        return false;
      }

      allow read: if true;
      allow create: if canCreateTeam();
      allow update: if canUpdateTeam();
      allow delete: if canDeleteTeam();
      allow write: if false;
    }

    match /teams-auth/{teamId} {
      // TODO: Only team lead can read and update
      allow read, write, create, update, delete: if false;
    }

    match /teammates/{teammateId} {
      // TODO: Only team lead can read and update
      allow read, write, create, update, delete: if false;
    }

    ///////////////////////////////////////////////////////////////////////////
    // Shared Functions

      function hasValidCreator() {
        return (
          'id' in incomingData().creator.keys() &&
          exists(/databases/$(database)/documents/users/$(incomingData().creator.id))
        );
      }

      function hasValidSchool() {
        return (
          'id' in incomingData().school.keys() &&
          exists(/databases/$(database)/documents/schools/$(incomingData().school.id))
        );
      }

      function isTimestampField(field) {
        return (
          incomingData()[field] is timestamp
        );
      }

     function hasLessThanEqualSize(field, size) {
       return (
         incomingData()[field].size() <= size
        );
     }

    function currentUser() {
      return request.auth;
    }

    function requestingUser() {
      return currentUser().uid;
    }

    function isSignedIn() {
      return requestingUser() != null;
    }

    // Does the logged-in user match the requested userId?
    function isOwner(userId) {
      return (
        isSignedIn() &&
        requestingUser() == userId
      );
    }

    function isEmailVerified() {
      return currentUser().token.email_verified;
    }

    // Data that exists on the Firestore document
    function existingData() {
      return resource.data;
    }

    // Data that is sent to a Firestore document
    function incomingData() {
      return request.resource.data;
    }

    function incomingDataKeys() {
      return incomingData().keys();
    }

    function documentFieldsCheckOut(requiredFields, optionalFields) {
        let allFields = requiredFields.concat(optionalFields);
        return (
          incomingDataKeys().hasAll(requiredFields) &&
          incomingDataKeys().hasOnly(allFields)
        );
    }

    function val(field) {
      return incomingData()[field];
    }

    function isNull(field) {
      return isValueNull(val(field));
    }

    function isValueNull(value) {
      return value == null;
    }

    function isString(field) {
      return isValueString(val(field));
    }

    function isValueString(value) {
      return string(value) == value;
    }

    function hasLengthOrNull(field, max) {
      return hasLength(field, 0, max) || isNull(field);
    }

    function hasLength(field, min, max) {
      return hasValueLength(val(field), min, max);
    }

    function hasValueLength(value, min, max) {
      return (
        (min == 0 || value.size() >= min) &&
        (max == 0 || value.size() <= max)
      );
    }

    function isValidOption(field, options) {
      return val(field) in options;
    }

  }
}
