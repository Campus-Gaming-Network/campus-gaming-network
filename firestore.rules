rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    ///////////////////////////////////////////////////////////////////////////
    // Rules

    match /users/{userId} {
      allow read: if true;
      allow create: if canCreateUser(incomingData());
      allow update: if canUpdateUser(userId, incomingData());
      allow delete: if canDeleteUser(userId);
      allow write: if false;
    }

    match /events/{eventId} {
      allow read: if true;
      allow create: if canCreateEvent(incomingData());
      allow update: if canUpdateEvent(incomingData());
      allow delete: if canDeleteEvent(existingData());
      allow write: if false;
    }

    match /schools/{schoolId} {
      allow read: if true;
      allow write, create, update, delete: if false;
    }

    match /event-responses/{eventResponseId} {
      allow read: if true;
      allow create: if canCreateEventResponse(incomingData());
      allow update: if canUpdateEventResponse(incomingData());
      allow write, delete: if false;
    }

    match /game-queries/{gameQueryId} {
      allow read: if true;
      allow write, update, create, delete: if false;
    }

    ///////////////////////////////////////////////////////////////////////////
    // User Functions

    function canCreateUser(incomingData) {
      return isValidNewUser(incomingData);
    }

    function isValidNewUser(incomingData) {
      return (
        hasLength('firstName', 1, 255) &&
        hasLength('lastName', 1, 255) &&
        hasLength('status', 1, 15) &&
        hasLength('gravatar', 1, 255) &&
        isValidOption("status", [
          "FRESHMAN",
          "SOPHMORE",
          "JUNIOR",
          "SENIOR",
          "GRAD",
          "ALUMNI",
          "FACULTY",
          "OTHER"
        ]) &&
        incomingData.school.path is path
        // docExists(incomingData.school.path)
      );
    }

    function canUpdateUser(userId, incomingData) {
      return (
        isOwner(userId) &&
        isValidNewUser(incomingData)
      );
    }

    function canDeleteUser(userId) {
      return (
        isOwner(userId)
      );
    }

    ///////////////////////////////////////////////////////////////////////////
    // Event Functions

    function canCreateEvent(incomingData) {
      return isSignedIn();
      // return (
      //   isSignedIn() &&
      //   userHasSchool(getUserData())
      // );
    }

    function canUpdateEvent(incomingData) {
      return canCreateEvent(incomingData)
      // return (
      //   canCreateEvent(incomingData) &&
      //   isOwner(getDocData(incomingData.creator).id)
      // );
    }

    function canDeleteEvent(existingData) {
      return (
        isOwner(getDocData(existingData.creator).id)
      )
    }

    ///////////////////////////////////////////////////////////////////////////
    // Event Response Functions

    function canReadEventResponse(existingData) {
      return true;
      // return (
      //   isOwner(getDocData(existingData.user).id)
      // )
    }

    function canCreateEventResponse(incomingData) {
      return (
        isSignedIn() &&
        isValidEventResponse(incomingData)
      );
    }

    function isValidEventResponse(incomingData) {
      return (
        hasLength("response", 1, 5) &&
        isValidOption("response", ["YES", "NO"])
      );
      // return (
      //   incomingData.event is path &&
      //   incomingData.school is path &&
      //   incomingData.user is path &&
      //   docExists(incomingData.event.path) &&
      //   docExists(incomingData.school.path) &&
      //   docExists(incomingData.user.path) &&
      //   hasLength("response", 1, 5) &&
      //   isValidOption("response", ["YES", "NO"])
      // );
    }

    function canUpdateEventResponse(incomingData) {
      return true;
      // return (
      //   canCreateEventResponse(incomingData) &&
      //   isOwner(getDocData(incomingData.user).id)
      // );
    }

    ///////////////////////////////////////////////////////////////////////////
    // Shared Functions

    function currentUser() {
      return request.auth;
    }

    function requestingUser() {
      return currentUser().uid;
    }

    function isSignedIn() {
      return requestingUser() != null;
    }

    // Does the logged-in user match the requested userId?
    function isOwner(userId) {
      return (
        isSignedIn() &&
        requestingUser() == userId
      );
    }

    function isEmailVerified() {
      return currentUser().token.email_verified;
    }

    // Data that exists on the Firestore document
    function existingData() {
      return resource.data;
    }

    // Data that is sent to a Firestore document
    function incomingData() {
      return request.resource.data;
    }

    // Check if document exists from reference path
    function docExists(path) {
      return exists(/databases/$(database)/documents/$(path));
    }

    // Fetch document data from reference path
    function getDocData(path) {
      return get(/databases/$(database)/documents/$(path)).data;
    }

    // Fetch the requesting user's data from Firestore
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(requestingUser())).data;
    }

    // Does the user have a school?
    function userHasSchool(userData) {
      return (
        docExists(userData.school.path)
      );
    }

    function isBefore(dateTime) {
      return request.time < dateTime;
    }

    function isAfter(dateTime) {
      return request.time > dateTime;
    }

    function isWithinEventDateTime(event) {
      return isAfter(event.startDateTime) && isBefore(event.endDateTime);
    }

    function validEventDateTimes(event) {
      return (
        event.startDateTime is timestamp &&
        event.endDateTime is timestamp &&
        event.endDateTime > event.startDateTime
      );
    }

    function has(field) {
      return field in incomingData().keys();
    }

    function val(field) {
      return incomingData()[field];
    }

    function isString(field) {
      return isValueString(val(field));
    }

    function isValueString(value) {
      return string(value) == value;
    }

    function hasLength(field, min, max) {
      return hasValueLength(val(field), min, max);
    }

    function hasValueLength(value, min, max) {
      return (
        isValueString(value) &&
        (min == 0 || value.size() >= min) &&
        (max == 0 || value.size() <= max)
      );
    }

    function isValidOption(field, options) {
      return val(field) in options;
    }

  }
}
